; This file is automatically generated
; (see binding-generator/gen.rb)

(define sdl::init
    (c-lambda (Uint32) int
        "SDL_Init"))

(define sdl::init-sub-system
    (c-lambda (Uint32) int
        "SDL_InitSubSystem"))

(define sdl::quit-sub-system
    (c-lambda (Uint32) void
        "SDL_QuitSubSystem"))

(define sdl::was-init
    (c-lambda (Uint32) Uint32
        "SDL_WasInit"))

(define sdl::quit
    (c-lambda () void
        "SDL_Quit"))

(define sdl::reset-assertion-report
    (c-lambda () void
        "SDL_ResetAssertionReport"))

(define sdl::memory-barrier-release
    (c-lambda () void
        "SDL_MemoryBarrierRelease"))

(define sdl::memory-barrier-acquire
    (c-lambda () void
        "SDL_MemoryBarrierAcquire"))

(define sdl::get-num-audio-drivers
    (c-lambda () int
        "SDL_GetNumAudioDrivers"))

(define sdl::get-audio-driver
    (c-lambda (int) char-string
        "SDL_GetAudioDriver"))

(define sdl::audio-init
    (c-lambda (char-string) int
        "SDL_AudioInit"))

(define sdl::audio-quit
    (c-lambda () void
        "SDL_AudioQuit"))

(define sdl::get-current-audio-driver
    (c-lambda () char-string
        "SDL_GetCurrentAudioDriver"))

(define sdl::get-num-audio-devices
    (c-lambda (int) int
        "SDL_GetNumAudioDevices"))

(define sdl::get-audio-device-name
    (c-lambda (int int) char-string
        "SDL_GetAudioDeviceName"))

(define sdl::pause-audio
    (c-lambda (int) void
        "SDL_PauseAudio"))

(define sdl::pause-audio-device
    (c-lambda (SDL_AudioDeviceID int) void
        "SDL_PauseAudioDevice"))

(define sdl::lock-audio
    (c-lambda () void
        "SDL_LockAudio"))

(define sdl::lock-audio-device
    (c-lambda (SDL_AudioDeviceID) void
        "SDL_LockAudioDevice"))

(define sdl::unlock-audio
    (c-lambda () void
        "SDL_UnlockAudio"))

(define sdl::unlock-audio-device
    (c-lambda (SDL_AudioDeviceID) void
        "SDL_UnlockAudioDevice"))

(define sdl::close-audio
    (c-lambda () void
        "SDL_CloseAudio"))

(define sdl::close-audio-device
    (c-lambda (SDL_AudioDeviceID) void
        "SDL_CloseAudioDevice"))

(define sdl::set-clipboard-text
    (c-lambda (char-string) int
        "SDL_SetClipboardText"))

(define sdl::get-clipboard-text
    (c-lambda () char-string
        "SDL_GetClipboardText"))

(define sdl::has-clipboard-text
    (c-lambda () SDL_bool
        "SDL_HasClipboardText"))

(define sdl::get-cpu-count
    (c-lambda () int
        "SDL_GetCPUCount"))

(define sdl::get-cpu-cache-line-size
    (c-lambda () int
        "SDL_GetCPUCacheLineSize"))

(define sdl::has-rdtsc
    (c-lambda () SDL_bool
        "SDL_HasRDTSC"))

(define sdl::has-alti-vec
    (c-lambda () SDL_bool
        "SDL_HasAltiVec"))

(define sdl::has-mmx
    (c-lambda () SDL_bool
        "SDL_HasMMX"))

(define sdl::has3-dnow
    (c-lambda () SDL_bool
        "SDL_Has3DNow"))

(define sdl::has-sse
    (c-lambda () SDL_bool
        "SDL_HasSSE"))

(define sdl::has-sse2
    (c-lambda () SDL_bool
        "SDL_HasSSE2"))

(define sdl::has-sse3
    (c-lambda () SDL_bool
        "SDL_HasSSE3"))

(define sdl::has-sse41
    (c-lambda () SDL_bool
        "SDL_HasSSE41"))

(define sdl::has-sse42
    (c-lambda () SDL_bool
        "SDL_HasSSE42"))

(define sdl::get-system-ram
    (c-lambda () int
        "SDL_GetSystemRAM"))

(define sdl::get-error
    (c-lambda () char-string
        "SDL_GetError"))

(define sdl::clear-error
    (c-lambda () void
        "SDL_ClearError"))

(define sdl::error
    (c-lambda (int) int
        "SDL_Error"))

(define sdl::pump-events
    (c-lambda () void
        "SDL_PumpEvents"))

(define sdl::has-event
    (c-lambda (Uint32) SDL_bool
        "SDL_HasEvent"))

(define sdl::has-events
    (c-lambda (Uint32 Uint32) SDL_bool
        "SDL_HasEvents"))

(define sdl::flush-event
    (c-lambda (Uint32) void
        "SDL_FlushEvent"))

(define sdl::flush-events
    (c-lambda (Uint32 Uint32) void
        "SDL_FlushEvents"))

(define sdl::event-state
    (c-lambda (Uint32 int) Uint8
        "SDL_EventState"))

(define sdl::register-events
    (c-lambda (int) Uint32
        "SDL_RegisterEvents"))

(define sdl::get-base-path
    (c-lambda () char-string
        "SDL_GetBasePath"))

(define sdl::get-pref-path
    (c-lambda (char-string char-string) char-string
        "SDL_GetPrefPath"))

(define sdl::game-controller-add-mapping
    (c-lambda (char-string) int
        "SDL_GameControllerAddMapping"))

(define sdl::game-controller-mapping
    (c-lambda (sdl::game-controller-ptr) char-string
        "SDL_GameControllerMapping"))

(define sdl::is-game-controller
    (c-lambda (int) SDL_bool
        "SDL_IsGameController"))

(define sdl::game-controller-name-for-index
    (c-lambda (int) char-string
        "SDL_GameControllerNameForIndex"))

(define sdl::game-controller-open
    (c-lambda (int) sdl::game-controller-ptr
        "SDL_GameControllerOpen"))

(define sdl::game-controller-name
    (c-lambda (sdl::game-controller-ptr) char-string
        "SDL_GameControllerName"))

(define sdl::game-controller-get-attached
    (c-lambda (sdl::game-controller-ptr) SDL_bool
        "SDL_GameControllerGetAttached"))

(define sdl::game-controller-get-joystick
    (c-lambda (sdl::game-controller-ptr) sdl::joystick-ptr
        "SDL_GameControllerGetJoystick"))

(define sdl::game-controller-event-state
    (c-lambda (int) int
        "SDL_GameControllerEventState"))

(define sdl::game-controller-update
    (c-lambda () void
        "SDL_GameControllerUpdate"))

(define sdl::game-controller-get-axis-from-string
    (c-lambda (char-string) int
        "SDL_GameControllerGetAxisFromString"))

(define sdl::game-controller-get-string-for-axis
    (c-lambda (int) char-string
        "SDL_GameControllerGetStringForAxis"))

(define sdl::game-controller-get-axis
    (c-lambda (sdl::game-controller-ptr int) Sint16
        "SDL_GameControllerGetAxis"))

(define sdl::game-controller-get-button-from-string
    (c-lambda (char-string) int
        "SDL_GameControllerGetButtonFromString"))

(define sdl::game-controller-get-string-for-button
    (c-lambda (int) char-string
        "SDL_GameControllerGetStringForButton"))

(define sdl::game-controller-get-button
    (c-lambda (sdl::game-controller-ptr int) Uint8
        "SDL_GameControllerGetButton"))

(define sdl::game-controller-close
    (c-lambda (sdl::game-controller-ptr) void
        "SDL_GameControllerClose"))

(define sdl::record-gesture
    (c-lambda (SDL_TouchID) int
        "SDL_RecordGesture"))

(define sdl::save-all-dollar-templates
    (c-lambda (sdl::rw-ops-ptr) int
        "SDL_SaveAllDollarTemplates"))

(define sdl::save-dollar-template
    (c-lambda (SDL_GestureID sdl::rw-ops-ptr) int
        "SDL_SaveDollarTemplate"))

(define sdl::load-dollar-templates
    (c-lambda (SDL_TouchID sdl::rw-ops-ptr) int
        "SDL_LoadDollarTemplates"))

(define sdl::num-haptics
    (c-lambda () int
        "SDL_NumHaptics"))

(define sdl::haptic-name
    (c-lambda (int) char-string
        "SDL_HapticName"))

(define sdl::haptic-open
    (c-lambda (int) sdl::haptic-ptr
        "SDL_HapticOpen"))

(define sdl::haptic-opened
    (c-lambda (int) int
        "SDL_HapticOpened"))

(define sdl::haptic-index
    (c-lambda (sdl::haptic-ptr) int
        "SDL_HapticIndex"))

(define sdl::mouse-is-haptic
    (c-lambda () int
        "SDL_MouseIsHaptic"))

(define sdl::haptic-open-from-mouse
    (c-lambda () sdl::haptic-ptr
        "SDL_HapticOpenFromMouse"))

(define sdl::joystick-is-haptic
    (c-lambda (sdl::joystick-ptr) int
        "SDL_JoystickIsHaptic"))

(define sdl::haptic-open-from-joystick
    (c-lambda (sdl::joystick-ptr) sdl::haptic-ptr
        "SDL_HapticOpenFromJoystick"))

(define sdl::haptic-close
    (c-lambda (sdl::haptic-ptr) void
        "SDL_HapticClose"))

(define sdl::haptic-num-effects
    (c-lambda (sdl::haptic-ptr) int
        "SDL_HapticNumEffects"))

(define sdl::haptic-num-effects-playing
    (c-lambda (sdl::haptic-ptr) int
        "SDL_HapticNumEffectsPlaying"))

(define sdl::haptic-query
    (c-lambda (sdl::haptic-ptr) unsigned-int
        "SDL_HapticQuery"))

(define sdl::haptic-num-axes
    (c-lambda (sdl::haptic-ptr) int
        "SDL_HapticNumAxes"))

(define sdl::haptic-run-effect
    (c-lambda (sdl::haptic-ptr int Uint32) int
        "SDL_HapticRunEffect"))

(define sdl::haptic-stop-effect
    (c-lambda (sdl::haptic-ptr int) int
        "SDL_HapticStopEffect"))

(define sdl::haptic-destroy-effect
    (c-lambda (sdl::haptic-ptr int) void
        "SDL_HapticDestroyEffect"))

(define sdl::haptic-get-effect-status
    (c-lambda (sdl::haptic-ptr int) int
        "SDL_HapticGetEffectStatus"))

(define sdl::haptic-set-gain
    (c-lambda (sdl::haptic-ptr int) int
        "SDL_HapticSetGain"))

(define sdl::haptic-set-autocenter
    (c-lambda (sdl::haptic-ptr int) int
        "SDL_HapticSetAutocenter"))

(define sdl::haptic-pause
    (c-lambda (sdl::haptic-ptr) int
        "SDL_HapticPause"))

(define sdl::haptic-unpause
    (c-lambda (sdl::haptic-ptr) int
        "SDL_HapticUnpause"))

(define sdl::haptic-stop-all
    (c-lambda (sdl::haptic-ptr) int
        "SDL_HapticStopAll"))

(define sdl::haptic-rumble-supported
    (c-lambda (sdl::haptic-ptr) int
        "SDL_HapticRumbleSupported"))

(define sdl::haptic-rumble-init
    (c-lambda (sdl::haptic-ptr) int
        "SDL_HapticRumbleInit"))

(define sdl::haptic-rumble-play
    (c-lambda (sdl::haptic-ptr float Uint32) int
        "SDL_HapticRumblePlay"))

(define sdl::haptic-rumble-stop
    (c-lambda (sdl::haptic-ptr) int
        "SDL_HapticRumbleStop"))

(define sdl::set-hint-with-priority
    (c-lambda (char-string char-string int) SDL_bool
        "SDL_SetHintWithPriority"))

(define sdl::set-hint
    (c-lambda (char-string char-string) SDL_bool
        "SDL_SetHint"))

(define sdl::get-hint
    (c-lambda (char-string) char-string
        "SDL_GetHint"))

(define sdl::clear-hints
    (c-lambda () void
        "SDL_ClearHints"))

(define sdl::img-init
    (c-lambda (int) int
        "IMG_Init"))

(define sdl::img-quit
    (c-lambda () void
        "IMG_Quit"))

(define sdl::img-load-typed-rw
    (c-lambda (sdl::rw-ops-ptr int char-string) sdl::surface-ptr
        "IMG_LoadTyped_RW"))

(define sdl::img-load
    (c-lambda (char-string) sdl::surface-ptr
        "IMG_Load"))

(define sdl::img-load-rw
    (c-lambda (sdl::rw-ops-ptr int) sdl::surface-ptr
        "IMG_Load_RW"))

(define sdl::img-load-texture
    (c-lambda (sdl::renderer-ptr char-string) sdl::texture-ptr
        "IMG_LoadTexture"))

(define sdl::img-load-texture-rw
    (c-lambda (sdl::renderer-ptr sdl::rw-ops-ptr int) sdl::texture-ptr
        "IMG_LoadTexture_RW"))

(define sdl::img-load-texture-typed-rw
    (c-lambda (sdl::renderer-ptr sdl::rw-ops-ptr int char-string) sdl::texture-ptr
        "IMG_LoadTextureTyped_RW"))

(define sdl::img-is-ico
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isICO"))

(define sdl::img-is-cur
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isCUR"))

(define sdl::img-is-bmp
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isBMP"))

(define sdl::img-is-gif
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isGIF"))

(define sdl::img-is-jpg
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isJPG"))

(define sdl::img-is-lbm
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isLBM"))

(define sdl::img-is-pcx
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isPCX"))

(define sdl::img-is-png
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isPNG"))

(define sdl::img-is-pnm
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isPNM"))

(define sdl::img-is-tif
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isTIF"))

(define sdl::img-is-xcf
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isXCF"))

(define sdl::img-is-xpm
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isXPM"))

(define sdl::img-is-xv
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isXV"))

(define sdl::img-is-webp
    (c-lambda (sdl::rw-ops-ptr) int
        "IMG_isWEBP"))

(define sdl::img-load-ico-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadICO_RW"))

(define sdl::img-load-cur-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadCUR_RW"))

(define sdl::img-load-bmp-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadBMP_RW"))

(define sdl::img-load-gif-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadGIF_RW"))

(define sdl::img-load-jpg-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadJPG_RW"))

(define sdl::img-load-lbm-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadLBM_RW"))

(define sdl::img-load-pcx-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadPCX_RW"))

(define sdl::img-load-png-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadPNG_RW"))

(define sdl::img-load-pnm-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadPNM_RW"))

(define sdl::img-load-tga-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadTGA_RW"))

(define sdl::img-load-tif-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadTIF_RW"))

(define sdl::img-load-xcf-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadXCF_RW"))

(define sdl::img-load-xpm-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadXPM_RW"))

(define sdl::img-load-xv-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadXV_RW"))

(define sdl::img-load-webp-rw
    (c-lambda (sdl::rw-ops-ptr) sdl::surface-ptr
        "IMG_LoadWEBP_RW"))

(define sdl::img-save-png
    (c-lambda (sdl::surface-ptr char-string) int
        "IMG_SavePNG"))

(define sdl::img-save-png-rw
    (c-lambda (sdl::surface-ptr sdl::rw-ops-ptr int) int
        "IMG_SavePNG_RW"))

(define sdl::num-joysticks
    (c-lambda () int
        "SDL_NumJoysticks"))

(define sdl::joystick-name-for-index
    (c-lambda (int) char-string
        "SDL_JoystickNameForIndex"))

(define sdl::joystick-open
    (c-lambda (int) sdl::joystick-ptr
        "SDL_JoystickOpen"))

(define sdl::joystick-name
    (c-lambda (sdl::joystick-ptr) char-string
        "SDL_JoystickName"))

(define sdl::joystick-get-attached
    (c-lambda (sdl::joystick-ptr) SDL_bool
        "SDL_JoystickGetAttached"))

(define sdl::joystick-instance-id
    (c-lambda (sdl::joystick-ptr) SDL_JoystickID
        "SDL_JoystickInstanceID"))

(define sdl::joystick-num-axes
    (c-lambda (sdl::joystick-ptr) int
        "SDL_JoystickNumAxes"))

(define sdl::joystick-num-balls
    (c-lambda (sdl::joystick-ptr) int
        "SDL_JoystickNumBalls"))

(define sdl::joystick-num-hats
    (c-lambda (sdl::joystick-ptr) int
        "SDL_JoystickNumHats"))

(define sdl::joystick-num-buttons
    (c-lambda (sdl::joystick-ptr) int
        "SDL_JoystickNumButtons"))

(define sdl::joystick-update
    (c-lambda () void
        "SDL_JoystickUpdate"))

(define sdl::joystick-event-state
    (c-lambda (int) int
        "SDL_JoystickEventState"))

(define sdl::joystick-get-axis
    (c-lambda (sdl::joystick-ptr int) Sint16
        "SDL_JoystickGetAxis"))

(define sdl::joystick-get-hat
    (c-lambda (sdl::joystick-ptr int) Uint8
        "SDL_JoystickGetHat"))

(define sdl::joystick-get-button
    (c-lambda (sdl::joystick-ptr int) Uint8
        "SDL_JoystickGetButton"))

(define sdl::joystick-close
    (c-lambda (sdl::joystick-ptr) void
        "SDL_JoystickClose"))

(define sdl::get-keyboard-focus
    (c-lambda () sdl::window-ptr
        "SDL_GetKeyboardFocus"))

(define sdl::get-mod-state
    (c-lambda () int
        "SDL_GetModState"))

(define sdl::set-mod-state
    (c-lambda (int) void
        "SDL_SetModState"))

(define sdl::get-key-from-scancode
    (c-lambda (int) SDL_Keycode
        "SDL_GetKeyFromScancode"))

(define sdl::get-scancode-from-key
    (c-lambda (SDL_Keycode) int
        "SDL_GetScancodeFromKey"))

(define sdl::get-scancode-name
    (c-lambda (int) char-string
        "SDL_GetScancodeName"))

(define sdl::get-scancode-from-name
    (c-lambda (char-string) int
        "SDL_GetScancodeFromName"))

(define sdl::get-key-name
    (c-lambda (SDL_Keycode) char-string
        "SDL_GetKeyName"))

(define sdl::get-key-from-name
    (c-lambda (char-string) SDL_Keycode
        "SDL_GetKeyFromName"))

(define sdl::start-text-input
    (c-lambda () void
        "SDL_StartTextInput"))

(define sdl::is-text-input-active
    (c-lambda () SDL_bool
        "SDL_IsTextInputActive"))

(define sdl::stop-text-input
    (c-lambda () void
        "SDL_StopTextInput"))

(define sdl::has-screen-keyboard-support
    (c-lambda () SDL_bool
        "SDL_HasScreenKeyboardSupport"))

(define sdl::is-screen-keyboard-shown
    (c-lambda (sdl::window-ptr) SDL_bool
        "SDL_IsScreenKeyboardShown"))

(define sdl::log-reset-priorities
    (c-lambda () void
        "SDL_LogResetPriorities"))

(define sdl::show-simple-message-box
    (c-lambda (Uint32 char-string char-string sdl::window-ptr) int
        "SDL_ShowSimpleMessageBox"))

(define sdl::mix-init
    (c-lambda (int) int
        "Mix_Init"))

(define sdl::mix-quit
    (c-lambda () void
        "Mix_Quit"))

(define sdl::mix-open-audio
    (c-lambda (int Uint16 int int) int
        "Mix_OpenAudio"))

(define sdl::mix-allocate-channels
    (c-lambda (int) int
        "Mix_AllocateChannels"))

(define sdl::mix-get-num-chunk-decoders
    (c-lambda () int
        "Mix_GetNumChunkDecoders"))

(define sdl::mix-get-chunk-decoder
    (c-lambda (int) char-string
        "Mix_GetChunkDecoder"))

(define sdl::mix-get-num-music-decoders
    (c-lambda () int
        "Mix_GetNumMusicDecoders"))

(define sdl::mix-get-music-decoder
    (c-lambda (int) char-string
        "Mix_GetMusicDecoder"))

(define sdl::mix-unregister-all-effects
    (c-lambda (int) int
        "Mix_UnregisterAllEffects"))

(define sdl::mix-set-panning
    (c-lambda (int Uint8 Uint8) int
        "Mix_SetPanning"))

(define sdl::mix-set-position
    (c-lambda (int Sint16 Uint8) int
        "Mix_SetPosition"))

(define sdl::mix-set-distance
    (c-lambda (int Uint8) int
        "Mix_SetDistance"))

(define sdl::mix-set-reverse-stereo
    (c-lambda (int int) int
        "Mix_SetReverseStereo"))

(define sdl::mix-reserve-channels
    (c-lambda (int) int
        "Mix_ReserveChannels"))

(define sdl::mix-group-channel
    (c-lambda (int int) int
        "Mix_GroupChannel"))

(define sdl::mix-group-channels
    (c-lambda (int int int) int
        "Mix_GroupChannels"))

(define sdl::mix-group-available
    (c-lambda (int) int
        "Mix_GroupAvailable"))

(define sdl::mix-group-count
    (c-lambda (int) int
        "Mix_GroupCount"))

(define sdl::mix-group-oldest
    (c-lambda (int) int
        "Mix_GroupOldest"))

(define sdl::mix-group-newer
    (c-lambda (int) int
        "Mix_GroupNewer"))

(define sdl::mix-volume
    (c-lambda (int int) int
        "Mix_Volume"))

(define sdl::mix-volume-music
    (c-lambda (int) int
        "Mix_VolumeMusic"))

(define sdl::mix-halt-channel
    (c-lambda (int) int
        "Mix_HaltChannel"))

(define sdl::mix-halt-group
    (c-lambda (int) int
        "Mix_HaltGroup"))

(define sdl::mix-halt-music
    (c-lambda () int
        "Mix_HaltMusic"))

(define sdl::mix-expire-channel
    (c-lambda (int int) int
        "Mix_ExpireChannel"))

(define sdl::mix-fade-out-channel
    (c-lambda (int int) int
        "Mix_FadeOutChannel"))

(define sdl::mix-fade-out-group
    (c-lambda (int int) int
        "Mix_FadeOutGroup"))

(define sdl::mix-fade-out-music
    (c-lambda (int) int
        "Mix_FadeOutMusic"))

(define sdl::mix-fading-music
    (c-lambda () int
        "Mix_FadingMusic"))

(define sdl::mix-fading-channel
    (c-lambda (int) int
        "Mix_FadingChannel"))

(define sdl::mix-pause
    (c-lambda (int) void
        "Mix_Pause"))

(define sdl::mix-resume
    (c-lambda (int) void
        "Mix_Resume"))

(define sdl::mix-paused
    (c-lambda (int) int
        "Mix_Paused"))

(define sdl::mix-pause-music
    (c-lambda () void
        "Mix_PauseMusic"))

(define sdl::mix-resume-music
    (c-lambda () void
        "Mix_ResumeMusic"))

(define sdl::mix-rewind-music
    (c-lambda () void
        "Mix_RewindMusic"))

(define sdl::mix-paused-music
    (c-lambda () int
        "Mix_PausedMusic"))

(define sdl::mix-set-music-position
    (c-lambda (double) int
        "Mix_SetMusicPosition"))

(define sdl::mix-playing
    (c-lambda (int) int
        "Mix_Playing"))

(define sdl::mix-playing-music
    (c-lambda () int
        "Mix_PlayingMusic"))

(define sdl::mix-set-music-cmd
    (c-lambda (char-string) int
        "Mix_SetMusicCMD"))

(define sdl::mix-set-synchro-value
    (c-lambda (int) int
        "Mix_SetSynchroValue"))

(define sdl::mix-get-synchro-value
    (c-lambda () int
        "Mix_GetSynchroValue"))

(define sdl::mix-set-sound-fonts
    (c-lambda (char-string) int
        "Mix_SetSoundFonts"))

(define sdl::mix-get-sound-fonts
    (c-lambda () char-string
        "Mix_GetSoundFonts"))

(define sdl::mix-close-audio
    (c-lambda () void
        "Mix_CloseAudio"))

(define sdl::get-mouse-focus
    (c-lambda () sdl::window-ptr
        "SDL_GetMouseFocus"))

(define sdl::warp-mouse-in-window
    (c-lambda (sdl::window-ptr int int) void
        "SDL_WarpMouseInWindow"))

(define sdl::set-relative-mouse-mode
    (c-lambda (SDL_bool) int
        "SDL_SetRelativeMouseMode"))

(define sdl::get-relative-mouse-mode
    (c-lambda () SDL_bool
        "SDL_GetRelativeMouseMode"))

(define sdl::create-color-cursor
    (c-lambda (sdl::surface-ptr int int) sdl::cursor-ptr
        "SDL_CreateColorCursor"))

(define sdl::create-system-cursor
    (c-lambda (int) sdl::cursor-ptr
        "SDL_CreateSystemCursor"))

(define sdl::set-cursor
    (c-lambda (sdl::cursor-ptr) void
        "SDL_SetCursor"))

(define sdl::get-cursor
    (c-lambda () sdl::cursor-ptr
        "SDL_GetCursor"))

(define sdl::get-default-cursor
    (c-lambda () sdl::cursor-ptr
        "SDL_GetDefaultCursor"))

(define sdl::free-cursor
    (c-lambda (sdl::cursor-ptr) void
        "SDL_FreeCursor"))

(define sdl::show-cursor
    (c-lambda (int) int
        "SDL_ShowCursor"))

(define sdl::net-init
    (c-lambda () int
        "SDLNet_Init"))

(define sdl::net-quit
    (c-lambda () void
        "SDLNet_Quit"))

(define sdl::net-get-error
    (c-lambda () char-string
        "SDLNet_GetError"))

(define sdl::get-pixel-format-name
    (c-lambda (Uint32) char-string
        "SDL_GetPixelFormatName"))

(define sdl::masks-to-pixel-format-enum
    (c-lambda (int Uint32 Uint32 Uint32 Uint32) Uint32
        "SDL_MasksToPixelFormatEnum"))

(define sdl::get-platform
    (c-lambda () char-string
        "SDL_GetPlatform"))

(define sdl::get-num-render-drivers
    (c-lambda () int
        "SDL_GetNumRenderDrivers"))

(define sdl::get-render-driver-info
    (c-lambda (int sdl::renderer-info-ptr) int
        "SDL_GetRenderDriverInfo"))

(define sdl::create-renderer
    (c-lambda (sdl::window-ptr int Uint32) sdl::renderer-ptr
        "SDL_CreateRenderer"))

(define sdl::create-software-renderer
    (c-lambda (sdl::surface-ptr) sdl::renderer-ptr
        "SDL_CreateSoftwareRenderer"))

(define sdl::get-renderer
    (c-lambda (sdl::window-ptr) sdl::renderer-ptr
        "SDL_GetRenderer"))

(define sdl::get-renderer-info
    (c-lambda (sdl::renderer-ptr sdl::renderer-info-ptr) int
        "SDL_GetRendererInfo"))

(define sdl::create-texture
    (c-lambda (sdl::renderer-ptr Uint32 int int int) sdl::texture-ptr
        "SDL_CreateTexture"))

(define sdl::create-texture-from-surface
    (c-lambda (sdl::renderer-ptr sdl::surface-ptr) sdl::texture-ptr
        "SDL_CreateTextureFromSurface"))

(define sdl::set-texture-color-mod
    (c-lambda (sdl::texture-ptr Uint8 Uint8 Uint8) int
        "SDL_SetTextureColorMod"))

(define sdl::set-texture-alpha-mod
    (c-lambda (sdl::texture-ptr Uint8) int
        "SDL_SetTextureAlphaMod"))

(define sdl::set-texture-blend-mode
    (c-lambda (sdl::texture-ptr int) int
        "SDL_SetTextureBlendMode"))

(define sdl::unlock-texture
    (c-lambda (sdl::texture-ptr) void
        "SDL_UnlockTexture"))

(define sdl::render-target-supported
    (c-lambda (sdl::renderer-ptr) SDL_bool
        "SDL_RenderTargetSupported"))

(define sdl::set-render-target
    (c-lambda (sdl::renderer-ptr sdl::texture-ptr) int
        "SDL_SetRenderTarget"))

(define sdl::get-render-target
    (c-lambda (sdl::renderer-ptr) sdl::texture-ptr
        "SDL_GetRenderTarget"))

(define sdl::render-set-logical-size
    (c-lambda (sdl::renderer-ptr int int) int
        "SDL_RenderSetLogicalSize"))

(define sdl::render-set-scale
    (c-lambda (sdl::renderer-ptr float float) int
        "SDL_RenderSetScale"))

(define sdl::set-render-draw-blend-mode
    (c-lambda (sdl::renderer-ptr int) int
        "SDL_SetRenderDrawBlendMode"))

(define sdl::render-clear
    (c-lambda (sdl::renderer-ptr) int
        "SDL_RenderClear"))

(define sdl::render-draw-point
    (c-lambda (sdl::renderer-ptr int int) int
        "SDL_RenderDrawPoint"))

(define sdl::render-draw-line
    (c-lambda (sdl::renderer-ptr int int int int) int
        "SDL_RenderDrawLine"))

(define sdl::render-present
    (c-lambda (sdl::renderer-ptr) void
        "SDL_RenderPresent"))

(define sdl::destroy-texture
    (c-lambda (sdl::texture-ptr) void
        "SDL_DestroyTexture"))

(define sdl::destroy-renderer
    (c-lambda (sdl::renderer-ptr) void
        "SDL_DestroyRenderer"))

(define sdl::gl-unbind-texture
    (c-lambda (sdl::texture-ptr) int
        "SDL_GL_UnbindTexture"))

(define sdl::rw-from-file
    (c-lambda (char-string char-string) sdl::rw-ops-ptr
        "SDL_RWFromFile"))

(define sdl::alloc-rw
    (c-lambda () sdl::rw-ops-ptr
        "SDL_AllocRW"))

(define sdl::free-rw
    (c-lambda (sdl::rw-ops-ptr) void
        "SDL_FreeRW"))

(define sdl::read-u8
    (c-lambda (sdl::rw-ops-ptr) Uint8
        "SDL_ReadU8"))

(define sdl::read-le16
    (c-lambda (sdl::rw-ops-ptr) Uint16
        "SDL_ReadLE16"))

(define sdl::read-be16
    (c-lambda (sdl::rw-ops-ptr) Uint16
        "SDL_ReadBE16"))

(define sdl::read-le32
    (c-lambda (sdl::rw-ops-ptr) Uint32
        "SDL_ReadLE32"))

(define sdl::read-be32
    (c-lambda (sdl::rw-ops-ptr) Uint32
        "SDL_ReadBE32"))

(define sdl::read-le64
    (c-lambda (sdl::rw-ops-ptr) Uint64
        "SDL_ReadLE64"))

(define sdl::read-be64
    (c-lambda (sdl::rw-ops-ptr) Uint64
        "SDL_ReadBE64"))

(define sdl::write-u8
    (c-lambda (sdl::rw-ops-ptr Uint8) size_t
        "SDL_WriteU8"))

(define sdl::write-le16
    (c-lambda (sdl::rw-ops-ptr Uint16) size_t
        "SDL_WriteLE16"))

(define sdl::write-be16
    (c-lambda (sdl::rw-ops-ptr Uint16) size_t
        "SDL_WriteBE16"))

(define sdl::write-le32
    (c-lambda (sdl::rw-ops-ptr Uint32) size_t
        "SDL_WriteLE32"))

(define sdl::write-be32
    (c-lambda (sdl::rw-ops-ptr Uint32) size_t
        "SDL_WriteBE32"))

(define sdl::write-le64
    (c-lambda (sdl::rw-ops-ptr Uint64) size_t
        "SDL_WriteLE64"))

(define sdl::write-be64
    (c-lambda (sdl::rw-ops-ptr Uint64) size_t
        "SDL_WriteBE64"))

(define sdl::create-shaped-window
    (c-lambda (char-string unsigned-int unsigned-int unsigned-int unsigned-int Uint32) sdl::window-ptr
        "SDL_CreateShapedWindow"))

(define sdl::is-shaped-window
    (c-lambda (sdl::window-ptr) SDL_bool
        "SDL_IsShapedWindow"))

(define sdl::getenv
    (c-lambda (char-string) char-string
        "SDL_getenv"))

(define sdl::setenv
    (c-lambda (char-string char-string int) int
        "SDL_setenv"))

(define sdl::abs
    (c-lambda (int) int
        "SDL_abs"))

(define sdl::isdigit
    (c-lambda (int) int
        "SDL_isdigit"))

(define sdl::isspace
    (c-lambda (int) int
        "SDL_isspace"))

(define sdl::toupper
    (c-lambda (int) int
        "SDL_toupper"))

(define sdl::tolower
    (c-lambda (int) int
        "SDL_tolower"))

(define sdl::strlen
    (c-lambda (char-string) size_t
        "SDL_strlen"))

(define sdl::strlcpy
    (c-lambda (char-string char-string size_t) size_t
        "SDL_strlcpy"))

(define sdl::utf8strlcpy
    (c-lambda (char-string char-string size_t) size_t
        "SDL_utf8strlcpy"))

(define sdl::strlcat
    (c-lambda (char-string char-string size_t) size_t
        "SDL_strlcat"))

(define sdl::strdup
    (c-lambda (char-string) char-string
        "SDL_strdup"))

(define sdl::strrev
    (c-lambda (char-string) char-string
        "SDL_strrev"))

(define sdl::strupr
    (c-lambda (char-string) char-string
        "SDL_strupr"))

(define sdl::strlwr
    (c-lambda (char-string) char-string
        "SDL_strlwr"))

(define sdl::strchr
    (c-lambda (char-string int) char-string
        "SDL_strchr"))

(define sdl::strrchr
    (c-lambda (char-string int) char-string
        "SDL_strrchr"))

(define sdl::strstr
    (c-lambda (char-string char-string) char-string
        "SDL_strstr"))

(define sdl::itoa
    (c-lambda (int char-string int) char-string
        "SDL_itoa"))

(define sdl::uitoa
    (c-lambda (unsigned-int char-string int) char-string
        "SDL_uitoa"))

(define sdl::ltoa
    (c-lambda (long char-string int) char-string
        "SDL_ltoa"))

(define sdl::ultoa
    (c-lambda (unsigned-long char-string int) char-string
        "SDL_ultoa"))

(define sdl::lltoa
    (c-lambda (Sint64 char-string int) char-string
        "SDL_lltoa"))

(define sdl::ulltoa
    (c-lambda (Uint64 char-string int) char-string
        "SDL_ulltoa"))

(define sdl::atoi
    (c-lambda (char-string) int
        "SDL_atoi"))

(define sdl::atof
    (c-lambda (char-string) double
        "SDL_atof"))

(define sdl::strcmp
    (c-lambda (char-string char-string) int
        "SDL_strcmp"))

(define sdl::strncmp
    (c-lambda (char-string char-string size_t) int
        "SDL_strncmp"))

(define sdl::strcasecmp
    (c-lambda (char-string char-string) int
        "SDL_strcasecmp"))

(define sdl::strncasecmp
    (c-lambda (char-string char-string size_t) int
        "SDL_strncasecmp"))

(define sdl::atan
    (c-lambda (double) double
        "SDL_atan"))

(define sdl::atan2
    (c-lambda (double double) double
        "SDL_atan2"))

(define sdl::ceil
    (c-lambda (double) double
        "SDL_ceil"))

(define sdl::copysign
    (c-lambda (double double) double
        "SDL_copysign"))

(define sdl::cos
    (c-lambda (double) double
        "SDL_cos"))

(define sdl::cosf
    (c-lambda (float) float
        "SDL_cosf"))

(define sdl::fabs
    (c-lambda (double) double
        "SDL_fabs"))

(define sdl::floor
    (c-lambda (double) double
        "SDL_floor"))

(define sdl::log
    (c-lambda (double) double
        "SDL_log"))

(define sdl::pow
    (c-lambda (double double) double
        "SDL_pow"))

(define sdl::scalbn
    (c-lambda (double int) double
        "SDL_scalbn"))

(define sdl::sin
    (c-lambda (double) double
        "SDL_sin"))

(define sdl::sinf
    (c-lambda (float) float
        "SDL_sinf"))

(define sdl::sqrt
    (c-lambda (double) double
        "SDL_sqrt"))

(define sdl::iconv-string
    (c-lambda (char-string char-string char-string size_t) char-string
        "SDL_iconv_string"))

(define sdl::create-rgb-surface
    (c-lambda (Uint32 int int int Uint32 Uint32 Uint32 Uint32) sdl::surface-ptr
        "SDL_CreateRGBSurface"))

(define sdl::free-surface
    (c-lambda (sdl::surface-ptr) void
        "SDL_FreeSurface"))

(define sdl::lock-surface
    (c-lambda (sdl::surface-ptr) int
        "SDL_LockSurface"))

(define sdl::unlock-surface
    (c-lambda (sdl::surface-ptr) void
        "SDL_UnlockSurface"))

(define sdl::load-bmp-rw
    (c-lambda (sdl::rw-ops-ptr int) sdl::surface-ptr
        "SDL_LoadBMP_RW"))

(define sdl::save-bmp-rw
    (c-lambda (sdl::surface-ptr sdl::rw-ops-ptr int) int
        "SDL_SaveBMP_RW"))

(define sdl::set-surface-rle
    (c-lambda (sdl::surface-ptr int) int
        "SDL_SetSurfaceRLE"))

(define sdl::set-color-key
    (c-lambda (sdl::surface-ptr int Uint32) int
        "SDL_SetColorKey"))

(define sdl::set-surface-color-mod
    (c-lambda (sdl::surface-ptr Uint8 Uint8 Uint8) int
        "SDL_SetSurfaceColorMod"))

(define sdl::set-surface-alpha-mod
    (c-lambda (sdl::surface-ptr Uint8) int
        "SDL_SetSurfaceAlphaMod"))

(define sdl::set-surface-blend-mode
    (c-lambda (sdl::surface-ptr int) int
        "SDL_SetSurfaceBlendMode"))

(define sdl::convert-surface-format
    (c-lambda (sdl::surface-ptr Uint32 Uint32) sdl::surface-ptr
        "SDL_ConvertSurfaceFormat"))

(define sdl::get-thread-name
    (c-lambda (sdl::thread-ptr) char-string
        "SDL_GetThreadName"))

(define sdl::thread-id
    (c-lambda () SDL_threadID
        "SDL_ThreadID"))

(define sdl::get-thread-id
    (c-lambda (sdl::thread-ptr) SDL_threadID
        "SDL_GetThreadID"))

(define sdl::set-thread-priority
    (c-lambda (int) int
        "SDL_SetThreadPriority"))

(define sdl::tls-create
    (c-lambda () SDL_TLSID
        "SDL_TLSCreate"))

(define sdl::get-ticks
    (c-lambda () Uint32
        "SDL_GetTicks"))

(define sdl::get-performance-counter
    (c-lambda () Uint64
        "SDL_GetPerformanceCounter"))

(define sdl::get-performance-frequency
    (c-lambda () Uint64
        "SDL_GetPerformanceFrequency"))

(define sdl::delay
    (c-lambda (Uint32) void
        "SDL_Delay"))

(define sdl::remove-timer
    (c-lambda (SDL_TimerID) SDL_bool
        "SDL_RemoveTimer"))

(define sdl::get-num-touch-devices
    (c-lambda () int
        "SDL_GetNumTouchDevices"))

(define sdl::get-touch-device
    (c-lambda (int) SDL_TouchID
        "SDL_GetTouchDevice"))

(define sdl::get-num-touch-fingers
    (c-lambda (SDL_TouchID) int
        "SDL_GetNumTouchFingers"))

(define sdl::ttf-byte-swapped-unicode
    (c-lambda (int) void
        "TTF_ByteSwappedUNICODE"))

(define sdl::ttf-init
    (c-lambda () int
        "TTF_Init"))

(define sdl::ttf-open-font
    (c-lambda (char-string int) sdl::ttf-font-ptr
        "TTF_OpenFont"))

(define sdl::ttf-open-font-index
    (c-lambda (char-string int long) sdl::ttf-font-ptr
        "TTF_OpenFontIndex"))

(define sdl::ttf-open-font-rw
    (c-lambda (sdl::rw-ops-ptr int int) sdl::ttf-font-ptr
        "TTF_OpenFontRW"))

(define sdl::ttf-open-font-index-rw
    (c-lambda (sdl::rw-ops-ptr int int long) sdl::ttf-font-ptr
        "TTF_OpenFontIndexRW"))

(define sdl::ttf-get-font-style
    (c-lambda (sdl::ttf-font-ptr) int
        "TTF_GetFontStyle"))

(define sdl::ttf-set-font-style
    (c-lambda (sdl::ttf-font-ptr int) void
        "TTF_SetFontStyle"))

(define sdl::ttf-get-font-outline
    (c-lambda (sdl::ttf-font-ptr) int
        "TTF_GetFontOutline"))

(define sdl::ttf-set-font-outline
    (c-lambda (sdl::ttf-font-ptr int) void
        "TTF_SetFontOutline"))

(define sdl::ttf-get-font-hinting
    (c-lambda (sdl::ttf-font-ptr) int
        "TTF_GetFontHinting"))

(define sdl::ttf-set-font-hinting
    (c-lambda (sdl::ttf-font-ptr int) void
        "TTF_SetFontHinting"))

(define sdl::ttf-font-height
    (c-lambda (sdl::ttf-font-ptr) int
        "TTF_FontHeight"))

(define sdl::ttf-font-ascent
    (c-lambda (sdl::ttf-font-ptr) int
        "TTF_FontAscent"))

(define sdl::ttf-font-descent
    (c-lambda (sdl::ttf-font-ptr) int
        "TTF_FontDescent"))

(define sdl::ttf-font-line-skip
    (c-lambda (sdl::ttf-font-ptr) int
        "TTF_FontLineSkip"))

(define sdl::ttf-get-font-kerning
    (c-lambda (sdl::ttf-font-ptr) int
        "TTF_GetFontKerning"))

(define sdl::ttf-set-font-kerning
    (c-lambda (sdl::ttf-font-ptr int) void
        "TTF_SetFontKerning"))

(define sdl::ttf-font-faces
    (c-lambda (sdl::ttf-font-ptr) long
        "TTF_FontFaces"))

(define sdl::ttf-font-face-is-fixed-width
    (c-lambda (sdl::ttf-font-ptr) int
        "TTF_FontFaceIsFixedWidth"))

(define sdl::ttf-font-face-family-name
    (c-lambda (sdl::ttf-font-ptr) char-string
        "TTF_FontFaceFamilyName"))

(define sdl::ttf-font-face-style-name
    (c-lambda (sdl::ttf-font-ptr) char-string
        "TTF_FontFaceStyleName"))

(define sdl::ttf-glyph-is-provided
    (c-lambda (sdl::ttf-font-ptr Uint16) int
        "TTF_GlyphIsProvided"))

(define sdl::ttf-close-font
    (c-lambda (sdl::ttf-font-ptr) void
        "TTF_CloseFont"))

(define sdl::ttf-quit
    (c-lambda () void
        "TTF_Quit"))

(define sdl::ttf-was-init
    (c-lambda () int
        "TTF_WasInit"))

(define sdl::get-revision
    (c-lambda () char-string
        "SDL_GetRevision"))

(define sdl::get-revision-number
    (c-lambda () int
        "SDL_GetRevisionNumber"))

(define sdl::get-num-video-drivers
    (c-lambda () int
        "SDL_GetNumVideoDrivers"))

(define sdl::get-video-driver
    (c-lambda (int) char-string
        "SDL_GetVideoDriver"))

(define sdl::video-init
    (c-lambda (char-string) int
        "SDL_VideoInit"))

(define sdl::video-quit
    (c-lambda () void
        "SDL_VideoQuit"))

(define sdl::get-current-video-driver
    (c-lambda () char-string
        "SDL_GetCurrentVideoDriver"))

(define sdl::get-num-video-displays
    (c-lambda () int
        "SDL_GetNumVideoDisplays"))

(define sdl::get-display-name
    (c-lambda (int) char-string
        "SDL_GetDisplayName"))

(define sdl::get-num-display-modes
    (c-lambda (int) int
        "SDL_GetNumDisplayModes"))

(define sdl::get-window-display-index
    (c-lambda (sdl::window-ptr) int
        "SDL_GetWindowDisplayIndex"))

(define sdl::get-window-pixel-format
    (c-lambda (sdl::window-ptr) Uint32
        "SDL_GetWindowPixelFormat"))

(define sdl::create-window
    (c-lambda (char-string int int int int Uint32) sdl::window-ptr
        "SDL_CreateWindow"))

(define sdl::get-window-id
    (c-lambda (sdl::window-ptr) Uint32
        "SDL_GetWindowID"))

(define sdl::get-window-from-id
    (c-lambda (Uint32) sdl::window-ptr
        "SDL_GetWindowFromID"))

(define sdl::get-window-flags
    (c-lambda (sdl::window-ptr) Uint32
        "SDL_GetWindowFlags"))

(define sdl::set-window-title
    (c-lambda (sdl::window-ptr char-string) void
        "SDL_SetWindowTitle"))

(define sdl::get-window-title
    (c-lambda (sdl::window-ptr) char-string
        "SDL_GetWindowTitle"))

(define sdl::set-window-icon
    (c-lambda (sdl::window-ptr sdl::surface-ptr) void
        "SDL_SetWindowIcon"))

(define sdl::set-window-position
    (c-lambda (sdl::window-ptr int int) void
        "SDL_SetWindowPosition"))

(define sdl::set-window-size
    (c-lambda (sdl::window-ptr int int) void
        "SDL_SetWindowSize"))

(define sdl::set-window-minimum-size
    (c-lambda (sdl::window-ptr int int) void
        "SDL_SetWindowMinimumSize"))

(define sdl::set-window-maximum-size
    (c-lambda (sdl::window-ptr int int) void
        "SDL_SetWindowMaximumSize"))

(define sdl::set-window-bordered
    (c-lambda (sdl::window-ptr SDL_bool) void
        "SDL_SetWindowBordered"))

(define sdl::show-window
    (c-lambda (sdl::window-ptr) void
        "SDL_ShowWindow"))

(define sdl::hide-window
    (c-lambda (sdl::window-ptr) void
        "SDL_HideWindow"))

(define sdl::raise-window
    (c-lambda (sdl::window-ptr) void
        "SDL_RaiseWindow"))

(define sdl::maximize-window
    (c-lambda (sdl::window-ptr) void
        "SDL_MaximizeWindow"))

(define sdl::minimize-window
    (c-lambda (sdl::window-ptr) void
        "SDL_MinimizeWindow"))

(define sdl::restore-window
    (c-lambda (sdl::window-ptr) void
        "SDL_RestoreWindow"))

(define sdl::set-window-fullscreen
    (c-lambda (sdl::window-ptr Uint32) int
        "SDL_SetWindowFullscreen"))

(define sdl::get-window-surface
    (c-lambda (sdl::window-ptr) sdl::surface-ptr
        "SDL_GetWindowSurface"))

(define sdl::update-window-surface
    (c-lambda (sdl::window-ptr) int
        "SDL_UpdateWindowSurface"))

(define sdl::set-window-grab
    (c-lambda (sdl::window-ptr SDL_bool) void
        "SDL_SetWindowGrab"))

(define sdl::get-window-grab
    (c-lambda (sdl::window-ptr) SDL_bool
        "SDL_GetWindowGrab"))

(define sdl::set-window-brightness
    (c-lambda (sdl::window-ptr float) int
        "SDL_SetWindowBrightness"))

(define sdl::get-window-brightness
    (c-lambda (sdl::window-ptr) float
        "SDL_GetWindowBrightness"))

(define sdl::destroy-window
    (c-lambda (sdl::window-ptr) void
        "SDL_DestroyWindow"))

(define sdl::is-screen-saver-enabled
    (c-lambda () SDL_bool
        "SDL_IsScreenSaverEnabled"))

(define sdl::enable-screen-saver
    (c-lambda () void
        "SDL_EnableScreenSaver"))

(define sdl::disable-screen-saver
    (c-lambda () void
        "SDL_DisableScreenSaver"))

(define sdl::gl-load-library
    (c-lambda (char-string) int
        "SDL_GL_LoadLibrary"))

(define sdl::gl-unload-library
    (c-lambda () void
        "SDL_GL_UnloadLibrary"))

(define sdl::gl-extension-supported
    (c-lambda (char-string) SDL_bool
        "SDL_GL_ExtensionSupported"))

(define sdl::gl-get-current-window
    (c-lambda () sdl::window-ptr
        "SDL_GL_GetCurrentWindow"))

(define sdl::gl-set-swap-interval
    (c-lambda (int) int
        "SDL_GL_SetSwapInterval"))

(define sdl::gl-get-swap-interval
    (c-lambda () int
        "SDL_GL_GetSwapInterval"))

(define sdl::gl-swap-window
    (c-lambda (sdl::window-ptr) void
        "SDL_GL_SwapWindow"))

